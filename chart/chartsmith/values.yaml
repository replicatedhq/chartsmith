images:
  app:
    registry: proxy.replicated.com
    repository: proxy/chartsmith/dockerhub/chartsmith/chartsmith-app
    # Default is the chart appVersion.
    tag: ""
    pullPolicy: IfNotPresent
  worker:
    registry: proxy.replicated.com
    repository: proxy/chartsmith/dockerhub/chartsmith/chartsmith-worker
    # Default is the chart appVersion.
    tag: ""
    pullPolicy: IfNotPresent
  centrifugo:
    registry: proxy.replicated.com
    repository: proxy/chartsmith/dockerhub/centrifugo/centrifugo
    tag: "v5"
    pullPolicy: IfNotPresent
  pgvector:
    registry: proxy.replicated.com
    repository: proxy/chartsmith/dockerhub/ankane/pgvector
    tag: "latest"
    pullPolicy: IfNotPresent

nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information see: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information see: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: NodePort
  port: 3000
  targetPort: 3000
  nodePort: 30080
  annotations: {}
  labels: {}

livenessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 30
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /
    port: http
  initialDelaySeconds: 5
  periodSeconds: 5

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
  requests:
    cpu: 100m
    memory: 128Mi

# This is for setting ingress
# For more information see: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
    # - host: chartsmith.localdev.me
    #   paths:
    #     - path: /
    #       pathType: ImplementationSpecific
  tls: []
    # - secretName: chartsmith-tls
    #   hosts:
    #     - chartsmith.localdev.me

# Public endpoint configuration
# These values should match your ingress host and service port configuration
# TODO do we want these first three to be configurable?
# TODO remove example values from here (I think examples are better in comments)
config:
  # Public API endpoint URL that the frontend will use
  apiEndpoint: "http://chartsmith.localdev.me:3000/api"
  # WebSocket endpoint for real-time updates via Centrifugo
  centrifugoAddress: "ws://chartsmith.localdev.me:3000/centrifugo/connection"
  # Replicated OAuth redirect URI (leave empty if not using)
  replicatedRedirect:
    enabled: false
    url: ""

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

metrics:
  enabled: false
  serviceMonitor:
    enabled: false
    interval: 30s

configmap:
  enabled: true
  data: {}

nodeSelector: {}

tolerations: []

affinity: {}

worker:
  # Bootstrap initial workspace on startup
  bootstrap:
    enabled: false
    # Default: "/bootstrap/default-workspace"
    workspaceDir: ""
  aws:
    useEC2Parameters: false
    # Default: "us-east-1"
    region: ""

auth:
  # CAUTION: Enable test authentication (NEVER USE IN PRODUCTION)
  enableTestAuth: false
  google:
    # OAuth redirect URI - must match Google OAuth configuration below (eg, "http://chartsmith.localdev.me:3000/auth/google")
    redirectUri: ""
    # Create OAuth credentials at https://console.cloud.google.com/
    clientId: ""
    # Optional: either set as value or in an existing secret
    clientSecret: ""
    # If set, key must be GOOGLE_CLIENT_SECRET
    existingK8sSecret: ""

# HMAC secret for JWT tokens (REQUIRED)
# 32-byte hex string for signing JWTs
# Generate with: openssl rand -hex 32
# REQUIRED: either hmacSecret or existingK8sSecretKey
hmac:
  secret: ""
  # If set, key must be HMAC_SECRET
  existingK8sSecret: ""

# Anthropic API configuration
# Get your API key from: https://console.anthropic.com/
# REQUIRED: either apiKey or existingSecret
anthropic:
  apiKey: ""
  # If set, key must be ANTHROPIC_API_KEY
  existingSecret: ""

# More information at: https://console.groq.com/docs/quickstart
# REQUIRED: either apiKey or existingSecret
groq:
  apiKey: ""
  # If set, key must be GROQ_API_KEY
  existingSecret: ""

# More information at: https://docs.voyageai.com/docs/faq#how-do-i-get-the-voyage-api-key
# REQUIRED: either apiKey or existingSecret
voyage:
  apiKey: ""
  # If set, key must be VOYAGE_API_KEY
  existingSecret: ""

# REQUIRED: these keys either as values or in an existing secret
# TODO: check if we need to set CHARTSMITH_CENTRIFUGO_API_KEY env var since we mount it in config.json
centrifugo:
  apiKey: ""
  tokenHmacSecret: ""
  adminPassword: ""
  adminSecret: ""
  # If set, secret data/stringData must be under a "config.json" key, and follow Centrifugo v5 json config format:
  # For more information see: https://centrifugal.dev/docs/5/server/configuration
  existingSecret: ""

# postgresql configuration:
# REQUIRED: either externalUri (with enabled=false) or credentials (with enabled=true)
postgresql:
  # Enable to create a Postgres instance (true)
  enabled: true
  # External Postgres connection URI (postgres://[user[:password]@][host][:port][/dbname][?options])
  # REQUIRED if enabled is "false"
  externalUri: ""
  # Credentials to create a Postgres instance
  # REQUIRED if enabled is "true" (must add all credentials, either as values or in an existing secret)
  credentials:
    username: ""
    password: ""
    database: ""
    # If set, keys must be PG_USERNAME, PG_PASSWORD, and PG_DATABASE
    existingSecret: ""
  storage:
    size: "10Gi"
    className: ""

# Optionallly enable the replicated SDK subchart
replicatedSdk:
  enabled: false
